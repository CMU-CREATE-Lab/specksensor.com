<style type="text/css">
   .date_axis {
      height: 42px;
      z-index: 2;
      border: 1px solid black;
      border-bottom-width: 0;
   }

   .y_axis {
      width: 42px;
      border: 1px solid black;
      border-left-width: 0;
   }

   .y_axis_label {
      position: absolute;
      text-align: center;
      font-size: 8pt;
      height: auto;
   }

   .rotate_90 {
      transform: rotate(90deg);
      -ms-transform: rotate(90deg);
      -webkit-transform: rotate(90deg);
   }

   .channel_link, .time_range_link {
      font-size: smaller;
      display: inline-block;
      margin-left: 10px;
      margin-right: 10px;
      cursor: pointer;
   }

   .channel_link:first-of-type {
      margin-left: 0;
   }

   .channel_link:last-of-type {
      margin-right: 0;
   }

   .time_range_switcher_panel {
      text-align: center;
      margin-top: 10px;
      margin-bottom: 10px;
   }

   #value_and_time {
      display: inline-block;
      float: left;
      text-align: left;
      font-size: smaller;
   }

   #grapher_container, #error_message, #no_data {
      font-family: 'Open Sans', 'Helvetica', sans-serif !important;
      font-weight: 400 !important;
      font-size: 16px !important;
      display: none;
      margin-top: 40px
   }

   #auto_scale_toggle_button {
      margin-bottom: 7px;
      padding: 4px 7px;
   }

   #export_button {
      margin-top: 5px;
      display: inline-block;
   }

   #export_button:focus {
      outline: none;
   }

   #export_button_container {
      text-align: right;
      margin-right: 15px;
   }

   #channel_switcher_panel {
      margin-left: 15px;
   }

   @media (max-width: 992px) {
      #export_button_container {
         text-align: center !important;
      }
   }

   #loading_panel {
      position: relative;
      text-align: center;
      height: 300px;
   }

   #loading_content {
      position: relative;
      top: 50%;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%);
      font-size: 24px;
   }
</style>

<script src="{{esdrUrl}}/lib/bodytrack-grapher/org/bodytrack/grapher/grapher2.nocache.js" type="text/javascript"></script>
<script src="{{esdrUrl}}/lib/multiplot-grapher/org/bodytrack/grapher/MultiplotGrapher.js" type="text/javascript"></script>
<div id="loading_panel">
   <div id="loading_content">Loading...</div>
</div>
<div id="grapher_container" class="noselect">
   <div id="title" style="text-align: center; font-size:larger"></div>
   <div id="distance" style="text-align: center; display:none;"></div>
   <div id="time_range_switcher_panel" class="time_range_switcher_panel"></div>
   <div id="time_range_switcher_panel2" class="time_range_switcher_panel"></div>
   <table id="grapher" border="0" cellpadding="0" cellspacing="0" align="center">
      <tr>
         <td>
            <div id="date_axis_container">
               <div id="date_axis" class="date_axis"></div>
               <div id="value_label"></div>
            </div>
         </td>
         <td align="center" valign="bottom">
            <a id="auto_scale_toggle_button" class="btn btn-default" href="#" onclick="toggleYAxisAutoScaling(); return false;" title="Toggle Y axis auto-scaling"><span class="glyphicon glyphicon-resize-vertical" aria-hidden="true"></span></a>
         </td>
      </tr>
      <tr>
         <td>
            <div id="plot" class="plot" style="height:500px; border: 1px solid black;"></div>
         </td>
         <td>
            <div id="y_axis" class="y_axis" style="position:relative; height:500px">
               <div id="y_axis_label" class="rotate_90 y_axis_label"></div>
            </div>
         </td>
      </tr>
      <tr>
         <td colspan="2">
         </td>
      </tr>
   </table>
   <div class="row">
      <div id="export_button_container" class="pull-right">
         <button id="export_button" class="btn btn-default btn-sm" onclick="doExport();">Download Data</button>
      </div>
      <div id="channel_switcher_panel"></div>
   </div>
</div>
<div id="no_data">No data found!</div>
<div id="error_message"></div>
<script src="/js/zip_codes.js" type="text/javascript"></script>
<script language="JavaScript" type="text/javascript">
   var ESDR_API_ROOT_URL = 'https://esdr.cmucreatelab.org/api/v1';
   var DEFAULT_CHANNEL = 'particle_concentration';
   var DEFAULT_CHANNEL_2 = 'PM2_5';

   var selectedFeedIdOrApiKey = null;
   var selectedChannelName = null;

   var channelUnits = null;

   // grapher stuff
   var dateAxis;
   var plotContainer;
   var grapher;
   var feed = null;
   var availableChannels = [];
   var isAutoScaleOn = false;

   // zip stuff
   var zipCode;

   var stationName;
   var stationLat;
   var stationLong;
   var stationDist;

   var channelList;

   function setRangeFromSecondsAgoToNow(numSecondsAgo) {
      var max = Date.now() / 1000;
      var min = max - numSecondsAgo;
      dateAxis.setMaxRange(Math.min(min, feed.minTimeSecs), Math.max(max, feed.maxTimeSecs));
      dateAxis.setRange(min, max);
   }

   var timeRangeOptions = [
      {
         "label" : "All Data",
         "handler" : function() {
            dateAxis.setMaxRange(feed.minTimeSecs, feed.maxTimeSecs);
            dateAxis.setRange(feed.minTimeSecs, feed.maxTimeSecs);
         }
      },
      {
         "label" : "Past 30 Days",
         "handler" : function() {
            setRangeFromSecondsAgoToNow(2592000);
         }
      },
      {
         "label" : "Past 7 Days",
         "handler" : function() {
            setRangeFromSecondsAgoToNow(604800);
         }
      },
      {
         "label" : "Past 24 Hours",
         "handler" : function() {
            setRangeFromSecondsAgoToNow(86400);
         }
      },
      {
         "label" : "Past 12 Hours",
         "handler" : function() {
            setRangeFromSecondsAgoToNow(43200);
         }
      }
   ];

   var timeRangeOptions2 = [
      {
         "label" : "Back 1 Day",
         "handler" : function() {
            dateAxis.setMaxRange(feed.minTimeSecs, feed.maxTimeSecs);
            dateAxis.setRange(dateAxis.getMin() - 86400, dateAxis.getMax() - 86400);
         }
      },
      {
         "label" : "Forward 1 Day",
         "handler" : function() {
            dateAxis.setMaxRange(feed.minTimeSecs, feed.maxTimeSecs);
            dateAxis.setRange(dateAxis.getMin() + 86400, dateAxis.getMax() + 86400);
         }
      }
   ];

   function doExport() {
      window.open(ESDR_API_ROOT_URL + "/feeds/" + feed.id + "/channels/" + channelList + "/export?from=" + dateAxis.getMin() + "&to=" + dateAxis.getMax(), '_blank');
   }

   function setTimeRange(rangeName) {
      var rangeFunction = timeRangeOptions[rangeName];
      if (typeof rangeFunction === 'function') {
         var range = rangeFunction();
         if (range && 'min' in range && 'max' in range) {
            dateAxis.setRange(range['min'], range['max']);
         }
      }
   }

   // Got this from: http://css-tricks.com/snippets/javascript/get-url-variables/
   function getQueryVariable(variable) {
      var query = window.location.search.substring(1);
      var vars = query.split("&");
      for (var i = 0; i < vars.length; i++) {
         var pair = vars[i].split("=");
         if (pair[0] == variable) {
            return pair[1];
         }
      }
      return null;
   }

   window.grapherLoad = function() {
      zipCode = (getQueryVariable('zip') || '').trim();
      $("#loading_panel").hide();
      timeRangeOptions.forEach(function(timeRangeOption) {
         var timeRangeElement = $('<div class="time_range_link"><a href="#" onclick="return false;">' + timeRangeOption.label + '</a></div>');
         timeRangeElement.click(timeRangeOption.handler);
         $("#time_range_switcher_panel").append(timeRangeElement);
      });

      timeRangeOptions2.forEach(function(timeRangeOption) {
         var timeRangeElement = $('<div class="time_range_link"><a href="#" onclick="return false;">' + timeRangeOption.label + '</a></div>');
         timeRangeElement.click(timeRangeOption.handler);
         $("#time_range_switcher_panel2").append(timeRangeElement);
      });

      if (zipCode.length <= 0) {
         selectedFeedIdOrApiKey = (getQueryVariable('feed') || '').trim();
         return keyGot();
      }
      else {
         if (ZIP_CODES[zipCode]) {
            stationName = ZIP_CODES[zipCode].site_name + " AirNow";
            stationLat = ZIP_CODES[zipCode].aq_latitude;
            stationLong = ZIP_CODES[zipCode].aq_longitude;
            stationDist = ZIP_CODES[zipCode].distance;

            //console.log(JSON.stringify(ZIP_CODES[zipCode], null, 3));

            superagent
                  .get(ESDR_API_ROOT_URL + '/feeds?where=latitude=' + stationLat + ',longitude=' + stationLong + ',productId=11')
                  .end(function(err, res) {
                          if (err) {
                             $("#error_message").text("Broken zip entry! Error: " + err).show();
                          }

                          if (res) {
                             if (res.status == 200) {
                                if (res.body) {
                                   //console.log(JSON.stringify(res.body, null, 3));
                                   if (res.body.data && res.body.data.totalCount && res.body.data.totalCount > 0) {
                                      if (res.body.data.rows[0].id) {
                                         selectedFeedIdOrApiKey = res.body.data.rows[0].id;
                                         return keyGot();
                                      }
                                      else {
                                         $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                                      }
                                   }
                                   else {
                                      console.log("Missing response data from ESDR");
                                      $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                                   }
                                }
                                else {
                                   console.log("Missing response body from ESDR");
                                   $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                                }
                             }
                             else if (res.status == 404) {
                                $("#error_message").text("Unknown feed.").show();
                             }
                             else {
                                //$("#error_message").text("Sorry, an unexpected error occurred: Unexpected response status [" + res.status + "].  Try another nearby zip code?").show();
                                return backupFind();
                             }
                          }
                          else {
                             console.log("No response from ESDR");
                             $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                          }
                       });
         }
         else {
            $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
         }
      }
   };

   function backupFind() {
      superagent
            .get(ESDR_API_ROOT_URL + '/feeds?where=latitude=' + stationLong + ',productId=11')
            .end(function(err, res) {
                    if (err) {
                       $("#error_message").text("Broken zip entry! Error: " + err).show();
                    }

                    if (res) {
                       if (res.status == 200) {
                          if (res.body) {
                             if (res.body.data) {
                                if (res.body.data.rows[0].id) {
                                   selectedFeedIdOrApiKey = res.body.data.rows[0].id;
                                   return keyGot();
                                }
                                else {
                                   $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                                }
                             }
                             else {
                                console.log("Missing response data from ESDR");
                                $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                             }
                          }
                          else {
                             console.log("Missing response body from ESDR");
                             $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                          }
                       }
                       else if (res.status == 404) {
                          $("#error_message").text("Unknown feed.").show();
                       }
                       else {
                          $("#error_message").text("Sorry, an unexpected error occurred: Unexpected response status [" + res.status + "].  Try another nearby zip code?").show();
                       }
                    }
                    else {
                       console.log("No response from ESDR");
                       $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                    }
                 });
   }

   function keyGot() {
      if (selectedFeedIdOrApiKey.length <= 0) {
         $("#error_message").text("No feed specified.").show();
      }
      else {
         selectedChannelName = (getQueryVariable('channel') || DEFAULT_CHANNEL).trim();

         superagent
               .get(ESDR_API_ROOT_URL + '/feeds/' + selectedFeedIdOrApiKey)
               .end(function(err, res) {
                       if (err) {
                          $("#error_message").text("Sorry, an unexpected error occurred: " + err).show();
                       }

                       if (res) {
                          if (res.status == 200) {
                             if (res.body) {
                                if (res.body.data) {
                                   feed = res.body.data;
                                   return renderPlot();
                                }
                                else {
                                   console.log("Missing response data from ESDR");
                                   $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                                }
                             }
                             else {
                                console.log("Missing response body from ESDR");
                                $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                             }
                          }
                          else if (res.status == 404) {
                             $("#error_message").text("Unknown feed.").show();
                          }
                          else {
                             $("#error_message").text("Sorry, an unexpected error occurred: Unexpected response status [" + res.status + "].  Try another nearby zip code?").show();
                          }
                       }
                       else {
                          console.log("No response from ESDR");
                          $("#error_message").text("Sorry, we could not find an air quality station for this zip code.").show();
                       }
                    });
      }
   }

   function renderPlot() {
      var grapherContainer = $("#grapher_container");
      var noData = $("#no_data");
      grapherContainer.hide();
      noData.hide();
      if (feed) {
         if (typeof feed.channelBounds === 'undefined' || feed.channelBounds == null) {
            noData.show();
            return;
         }

         //console.log(JSON.stringify(feed, null, 3));

         // render the links to change channels
         if (feed['channelBounds'] && feed['channelBounds']['channels']) {
            availableChannels = Object.keys(feed['channelBounds']['channels']).sort();
            //console.log(availableChannels);
            if (!(selectedChannelName in feed['channelBounds']['channels'])) {
               selectedChannelName = DEFAULT_CHANNEL_2;
               if (!(selectedChannelName in feed['channelBounds']['channels'])) {
                  selectedChannelName = availableChannels[0];
               }
            }

            // var isDefault = 0;

            // availableChannels.forEach(function(channelName) {
            //   if (channelName == selectedChannelName) {
            //     isDefault = 1;
            //   }
            // });

            // if (isDefault ==0) {
            //   selectedChannelName = DEFAULT_CHANNEL_2;
            // }

            availableChannels.forEach(function(channelName) {

               var prettyChannelName = channelName;
               if (channelList) {
                  channelList = channelList + channelName + ',';
               }
               else {
                  channelList = channelName + ',';
               }

               if (feed['channelSpecs'] && feed['channelSpecs'][channelName] && feed['channelSpecs'][channelName]['prettyName']) {
                  prettyChannelName = feed['channelSpecs'][channelName]['prettyName'];
               }

               var linkHtml;
               if (channelName == selectedChannelName) {
                  linkHtml = '<b>' + prettyChannelName + '</b>';
               }
               else {
                  linkHtml = '<a href="#" onclick="return false;">' + prettyChannelName + '</a>'
               }
               linkHtml = '<div class="channel_link">' + linkHtml + '</div>';
               var linkElement = $(linkHtml);
               linkElement.click(function() {
                  window.location = (window.location.pathname + '?feed=' + selectedFeedIdOrApiKey + '&channel=' + channelName + '&min=' + dateAxis.getMin() + '&max=' + dateAxis.getMax())
               });
               $("#channel_switcher_panel").append(linkElement);

            });
            channelList = channelList.slice(0, channelList.length - 1)
         }

         // set the title
         $("#title").html(feed.name);

         // set the Y axis label
         var yAxisLabel = null;
         if (feed['channelSpecs'] && feed['channelSpecs'][selectedChannelName]) {
            var prettyName = feed['channelSpecs'][selectedChannelName]['prettyName'];
            var units = feed['channelSpecs'][selectedChannelName]['units'];
            if (prettyName) {
               yAxisLabel = prettyName;
            }
            if (units) {
               channelUnits = units;
               yAxisLabel += " (" + units + ")";
            }
         }
         //console.log(selectedChannelName)

         if (yAxisLabel == null) {
            if (selectedChannelName == "PM2_5") {
               yAxisLabel = "Particle Mass, ug/m^3";
            }
            if (selectedChannelName == "PM10") {
               yAxisLabel = "Particle Mass, ug/m^3";
            }
            if (selectedChannelName == "RHUM") {
               yAxisLabel = "Percent Relative Humidity";
            }
            if (selectedChannelName == "TEMP") {
               yAxisLabel = "Temperature, Degrees Celcius";
            }
            if (selectedChannelName == "BARPR") {
               yAxisLabel = "Barometric Pressure, hPa";
            }
            if (yAxisLabel == null) {
               yAxisLabel = "Units to be added soon";
            }
         }

         $("#y_axis_label").html(yAxisLabel == null ? "" : yAxisLabel);

         grapherContainer.show();
         var channelMinTimeSecs = feed.channelBounds.channels[selectedChannelName].minTimeSecs;
         var channelMaxTimeSecs = feed.channelBounds.channels[selectedChannelName].maxTimeSecs;

         // Grapher is not happy if min time equals max time.  Adjust them if necessary
         if (channelMinTimeSecs == channelMaxTimeSecs) {
            channelMinTimeSecs--;
            channelMaxTimeSecs++;
         }
         dateAxis = new DateAxis("date_axis", "horizontal", { "min" : channelMinTimeSecs, "max" : channelMaxTimeSecs });
         dateAxis.setMaxRange(channelMinTimeSecs, channelMaxTimeSecs);
         dateAxis.addAxisChangeListener(function() {
            // auto-scale the y-axes
            if (isAutoScaleOn) {
               autoScaleYAxes();
            }
         });

         var urlMin = (getQueryVariable('min') || '').trim();
         var urlMax = (getQueryVariable('max') || '').trim();
         if (urlMin && urlMax) {
            dateAxis.setRange(parseFloat(urlMin), parseFloat(urlMax));
         }

         grapher = new org.bodytrack.grapher.MultiplotGrapher(dateAxis);

         var theChannel = {
            "min" : feed.channelBounds.channels[selectedChannelName].minValue,
            "max" : feed.channelBounds.channels[selectedChannelName].maxValue,
            "time_type" : "utc",
            "style" : {
               "styles" : [
                  { "type" : "line", "lineWidth" : 1, "show" : true, "color" : "#2e68a3" },
                  { "type" : "circle", radius : 1, "lineWidth" : 1, "show" : true, "color" : "#2e68a3", fill : true }
               ],
               "highlight" : {
                  "lineWidth" : 1,
                  "styles" : [
                     {
                        "show" : true,
                        "type" : "lollipop",
                        "color" : "#000000",
                        "radius" : 0,
                        "lineWidth" : 1,
                        "fill" : false
                     },
                     {
                        "type" : "circle",
                        radius : 3,
                        "lineWidth" : 0.5,
                        "show" : true,
                        "color" : "#ff0000",
                        fill : false
                     },
                     {
                        "show" : true,
                        "type" : "value",
                        "fillColor" : "#ff0000",
                        "marginWidth" : 10,
                        "font" : "7pt Helvetica,Arial,Verdana,sans-serif",
                        "verticalOffset" : 7,
                        "numberFormat" : "###,##0"
                     }
                  ]
               }
            }
         };

         grapher.addPlot(selectedChannelName,
                         theChannel,
                         function(level, offset, successCallback) {
                            superagent
                                  .get(ESDR_API_ROOT_URL + "/feeds/" + feed.id + "/channels/" + selectedChannelName + "/tiles/" + level + "." + offset)
                                  .end(function(err, res) {
                                          if (err) {
                                             return console.log("Error: " + res.body);
                                          }

                                          switch (res.status) {
                                             case 200:
                                                //console.log(ESDR_API_ROOT_URL + "/feeds/" + feed.id + "/channels/" + selectedChannelName + "/tiles/" + level + "." + offset)
                                                return successCallback(JSON.stringify(res.body.data));
                                             case 401:
                                                return console.log("Unauthorized");
                                             case 403:
                                                return console.log("Forbidden");
                                             default:
                                                return console.log("Error: " + res.body);
                                          }
                                       });
                         },
                         "y_axis");
         grapher.addDataPointListener(selectedChannelName, function(val) {
            var valueAndTimeElement = $("#value_and_time");
            if (val == null) {
               valueAndTimeElement.empty();
            }
            else {
               valueAndTimeElement.html(val.valueString + (channelUnits == null ? "" : " " + channelUnits) + "<br>" + val.dateString);
            }
         });

         plotContainer = new PlotContainer("plot", false, []);
         plotContainer.addPlot(grapher.getPlot(selectedChannelName));

         // set the sizes of the various plot elements
         setSizes();

         // set up window resize handler
         $(window).resize(setSizes);

         // Start off showing a week of data
         setRangeFromSecondsAgoToNow(604800);
      }
      else {
         noData.show();
      }

      if (stationDist) {
         if (Number(stationDist) > 0) {
            $("#distance").text("Approximately " + Math.round(Number(stationDist) * 10) / 10 + " miles from " + zipCode).show();
         }
      }
   }

   function autoScaleLockChange() {
      isAutoScaleOn = $("#autoScaleLockCheckbox").is(":checked");
      if (isAutoScaleOn) {
         autoScaleYAxes();
         $("#autoScaleYAxesButton").attr("disabled", "disabled");
      }
      else {
         $("#autoScaleYAxesButton").removeAttr("disabled");
      }
   }

   function toggleYAxisAutoScaling() {
      var autoScaleToggleButton = $("#auto_scale_toggle_button");
      isAutoScaleOn = !autoScaleToggleButton.hasClass("active");
      if (isAutoScaleOn) {
         autoScaleYAxes();
         autoScaleToggleButton.addClass("active");
      }
      else {
         autoScaleToggleButton.removeClass("active");
      }
      console.log("toggleYAxisAutoScaling: " + isAutoScaleOn);
   }

   function autoScaleYAxes() {
      grapher.forEachPlot(function(plot, yAxis) {
         var stats = plot.getSimpleStatistics(dateAxis.getMin(), dateAxis.getMax());

         if (typeof stats['y_min'] !== 'undefined' && typeof stats['y_max'] !== 'undefined') {
            var paddedRange = paddedYAxisRange(stats['y_min'], stats['y_max']);
            yAxis.setRange(paddedRange['min'], paddedRange['max']);
         }
      });
   }

   function paddedYAxisRange(min, max) {
      var yDiff = max - min;
      var padding = 0.5;
      if (yDiff < 1e-10) {
         padding = 0.5;
      }
      else {
         padding = 0.05 * yDiff;
      }
      return { min : min - padding, max : max + padding }
   }

   function setSizes() {
      var yAxisElement = $("#y_axis");
      var yAxisLabelElement = $("#y_axis_label");
      var totalWidth = $("#grapher_container").width();
      var yAxisWidth = yAxisElement.width();
      var yAxisHeight = yAxisElement.height();
      yAxisLabelElement.width(yAxisHeight); // set the width == height since we're rotating
      var yAxisLabelHeight = yAxisLabelElement.height();
      var plotContainerWidth = totalWidth - yAxisWidth - 3;  // subtract 3 to allow for borders

      // compute the position of the y-axis label
      var yAxisLabelLeft = Math.round(yAxisWidth + yAxisLabelHeight / 2 - yAxisHeight / 2 + 2);
      var yAxisLabelTop = Math.round(yAxisHeight / 2 - yAxisLabelHeight / 2);

      // set positions and sizes
      yAxisLabelElement.css("top", yAxisLabelTop + "px").css("left", yAxisLabelLeft + "px");
      dateAxis.setSize(plotContainerWidth, $("#date_axis").height(), SequenceNumber.getNext());
      plotContainer.setSize(plotContainerWidth, $("#plot").height(), SequenceNumber.getNext());
      grapher.updateYAxesSizes();
   }

</script>

